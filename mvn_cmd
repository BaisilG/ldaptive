#!/bin/sh

MVN=mvn

function run_mvn() {
  PROFILES=$1
  PHASES=$2
  SWITCH=$3
  if [ -z "${SWITCH}" ]; then
    ${MVN} -U -P${PROFILES} ${PHASES}
  else
    ${MVN} -U -P${PROFILES} ${PHASES} ${SWITCH}
  fi
}

case "$1" in
  clean)
    run_mvn integration,distribution,apache,jldap,opendj clean
    ;;
  javadoc)
    run_mvn apache,jldap,opendj javadoc:javadoc
    ;;
  package)
    run_mvn distribution,apache,jldap,opendj package
    ;;
  verify)
    run_mvn distribution,apache,jldap,opendj verify
    ;;
  install)
    run_mvn distribution,apache,jldap,opendj install
    ;;
  versions-set)
    VERSION=${2}
    if [ -z "${VERSION}" ]; then
      echo "USAGE: `basename $0` versions-set <version>"
      exit 1
    fi
    run_mvn distribution,apache,jldap,opendj versions:set "-DnewVersion=${VERSION} -DgenerateBackupPoms=false"
    ;;
  versions-display-dependency)
    run_mvn integration,distribution,apache,jldap,opendj versions:display-dependency-updates
    ;;
  versions-display-plugin)
    run_mvn integration,distribution,apache,jldap,opendj versions:display-plugin-updates
    ;;
  deploy)
    LOCAL_REPO=${2}
    if [ -z "${LOCAL_REPO}" ]; then
      echo "USAGE: `basename $0` deploy <repo-directory>"
      exit 1
    fi
    run_mvn apache,jldap,opendj clean
    run_mvn apache,jldap,opendj deploy "-DaltDeploymentRepository=snapshot::default::file://${LOCAL_REPO}"
    ;;
  bundle-create)
    run_mvn distribution,apache,jldap,opendj repository:bundle-create -Dsign=true
    ;;
  *)
    if [ -n "$1" ]; then
      echo "Invalid command"
    fi
    echo "USAGE: `basename $0` clean|javadoc|package|verify|install|versions-set|versions-display-dependency|versions-display-plugin|deploy|bundle-create"
esac
